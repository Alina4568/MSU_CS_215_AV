#include <stdio.h>

void AA() //заменить все символы ‘?’ на’!’
{
    char c;
    c = getchar();
    while(c != '.')
    {
        if(c == '?')
            printf("!");
        else
            putchar(c);
        c = getchar();
    }
}

void BB() //заменить все символы ‘?’ на’!’
{
    char c;
    c = getchar();
    while(c != '.')
    {
        if(c == '-');
        else if(c == '&')
            printf("&&");
        else
            putchar(c);
        c = getchar();
    }
}

void CC() //удалить все символы, не являющиеся строчными латинскими буквaми
{
    char c;
    c = getchar();
    while(c != '.')
    {
        if((c >= 'a') && (c <= 'z'))
            putchar(c);
        c = getchar();
    }
}

void DD() //изменить все строчные латинские буквы прописными (другие символы копировать в выходной поток без изменения)
{
    char c;
    int k = 'a' - 'A';
    c = getchar();
    while(c != '.')
    {
        if((c >= 'a') && (c <= 'z'))
            printf("%c", c-k);
        else
            putchar(c);
        c = getchar();
    }
}

void EE() //изменить все строчные латинские буквы прописными (другие символы копировать в выходной поток без изменения)
{
    char c;
    int k = 'a' - 'A';
    c = getchar();
    while(c != '.')
    {
        if((c >= 'A') && (c <= 'Z'))
            printf("%c", c+k);
        else
            putchar(c);
        c = getchar();
    }
}

void FF() //каждую группу рядом стоящих символов ‘+’ заменить одним таким
символом; 
{
    char c;
    int flag = 0;
    c = getchar();
    while(c != '.')
    {
        if(c == '+')
            flag = 1;
        else if(flag && (c != '+')){
            printf("+");
            putchar(c);
            flag = 0;
        }
        else
            putchar(c);

        c = getchar();
    }
    if(flag)
        printf("+");
}

void GG() /* каждую группу из n рядом стоящих символов ‘*’ заменить группой из n/2 рядом стоящих символов ‘+’ ( n >= 2 ); одиночные ‘*’ копировать в выходной поток без изменения */
{
    char c;
    int flag = 0;
    c = getchar();
    while(c != '.')
    {
        if(c == '*')
            flag += 1;
        else if((flag == 1) && (c != '*')){
            printf("*");
            putchar(c);
            flag = 0;
        }
        else if((flag >= 2) && (c != '*')){
            for(int i = 1; i <= flag/2; i++) printf("+");
            putchar(c);
            flag = 0;
        }
        else
            putchar(c);

        c = getchar();
    }
    if(flag >= 2)
            for(int i = 1; i <= flag/2; i++)
                printf("+");
    if(flag == 1)
            printf("*");
}

int skan(char mass[], int massIsDigit[])
{
    char c;
    int i = 0;
    c = getchar();
    while(c != '.')
    {
        mass[i] = c;
        if((c >= '0') && (c <= '9'))
            massIsDigit[i] = 1;
        i++;
        c = getchar();
    }
    return i;
}

void HH() /* удалить из каждой группы подряд идущих цифр все начальные незначащие нули (если группа состоит только из нулей, то заменить эту группу
одним нулем); */
{
    int len;
    char mass[100], massOutput[100];
    int massIsDigit[100];
    len = skan(mass, massIsDigit);
    
    for(int i = 0; i < len; i++)
    {
        massOutput[i] = '\0';
    }
    
    int i = 0, j = 0, firstNonNull;
    while(i < len)
    {
        if(massIsDigit[i] == 1)
        {
            j = i;
            while(massIsDigit[j] == 1)
            {
                j++;
            }
            j--;
            firstNonNull = j;
            for(int k = j; k >= i; k--)
            {
                if(mass[k] != '0')
                    firstNonNull = k;
            }
            for(int k = firstNonNull; k <= j; k++)
            {
                massOutput[k] = mass[k];
            }
            i = j;
        }
        else 
        {
            massOutput[i] = mass[i];
        }
        i++;
    }
    for(int i = 0; i < len; i++)
    {
        printf("%c", massOutput[i]);
    }
    
}

int input(char mass[])
{
    char c;
    int i = 0;
    c = getchar();
    while(c != '.')
    {
        mass[i] = c;
        i++;
        c = getchar();
    }
    
    return i;
}

void II() //удалить все комбинации символов the
{
    char mass[100];
    int len, i;
    len = input(mass);
    
    for(i = 0; i < len; i++)
    {
        if((i < len - 2) && (mass[i] == 't') && (mass[i+1] == 'h') && (mass[i+2] == 'e')) 
            i += 2;
        else 
            printf("%c", mass[i]);
    }
}

void KK() //заменить все комбинации символов child комбинациями символов children;
{
    char mass[100];
    int len, i;
    len = input(mass);
    
   for(i = 0; i < len; i++)
   {
         if((i < len - 4) && (mass[i] == 'c') && (mass[i+1] == 'h') && (mass[i+2] == 'i') && (mass[i+3] == 'l') && (mass[i+4] == 'd')) 
        {
            i += 4;
            printf("children");
        }
        else 
            printf("%c", mass[i]);
   }
}

void LL() /* удалить группы символов, расположенные между фигурными скобками { и }. Скобки тоже должны быть удалены. Предполагается, что скобки сбалансированы, и внутри каждой пары скобок других фигурных скобок нет. */
{
    char mass[100];
    int len, i, flag = 0;;
    len = input(mass);
    
   for(i = 0; i < len; i++)
   {
        if(mass[i] == '{')
            flag = 1;
        
        if(flag == 0)
            printf("%c", mass[i]);
            
        if(mass[i] == '}')
            flag = 0;
   }
}

int main()
{
    //AA();
	//BB();
	//CC();
	//DD();
	//EE();
	//FF();
	//GG();
        //HH();
	//II();
	//KK();
	//LL();
	
	printf("\n");
    
    return 0;
}
